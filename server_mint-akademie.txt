1. Git-Repo & CI/CD
	1.	Branch-Strategie festlegen
	•	Legt z.B. „main“ für Produktion und „develop“ für eure Feature-Branches an.
	2.	GitHub Actions (oder GitLab CI) vorbereiten
	•	Ein Workflow, der bei jedem Push
	•	euren Code lintet (z. B. mit flake8 oder black)
	•	eure Docker‐Images baut und in eine Registry (Docker Hub / GHCR) pusht
	•	Erstelle in deinem Repo eine Datei .github/workflows/ci.yml mit den Basis‐Schritten.

2. SSH-Keys & Server-Zugriff
	1.	SSH-Key generieren (falls noch nicht vorhanden)
			bash
			ssh-keygen -t ed25519 -C "rjgnargang@outlook.de"
	2.	Public-Key zu GitHub/Hetzner hinzufügen
		•	Auf GitHub in Settings → SSH and GPG Keys
		•	In Hetzner Cloud → SSH Keys
	3.	SSH-Config auf deinem PC (~/.ssh/config)
			sshconfig
			Host hetzner-vps
 			HostName <deine-vps-ip>
  			User root
  			IdentityFile ~/.ssh/id_ed25519

3. Docker & Docker Compose lokal testen
	1.	Docker installieren
	•	Auf deinem Rechner und auch auf dem Pi:
		bash
		# Debian/Ubuntu/Raspbian
		sudo apt update
		sudo apt install docker.io docker-compose-plugin
		sudo usermod -aG docker $USER
	2.	docker-compose.yml fürs lokale Testing
		•	Lege eine docker-compose.override.yml an, in der du z.B. Ports und Volumes auf Test-Daten umleitest.
	3.	Umgebungsdateien
		•	Pflege eine .env.example mit allen notwendigen Variablen (webuntis-Zugang, Pfade, Offset, …).
		•	Lokal kopierst du sie zu .env und befüllst sie mit Dummy-Werten.

4. Domain & DNS (Vorab konfigurieren)
	1.	Nameserver-Einträge beim Registrar anlegen
		•	Lege schon Mal A-Records (oder CNAMEs) an, die später auf eure VPS-IP zeigen:
		•	@ ->  123.123.123.123
		•	www -> 123.123.123.123
	2.	Let’s Encrypt Staging
		•	In eurem Reverse-Proxy könnt ihr schon jetzt mit dem Staging-Server testen, damit ihr später nicht von Rate-Limits erwischt werdet.

5. Reverse-Proxy (Traefik oder nginx-letsencrypt) lokal einrichten
	1.	Baue ein kleines Compose-Setup mit Traefik:
		yaml
		version: "3.8"
		services:
  		  traefik:
    		    image: traefik:v2.10
    		    ports:
      			- "80:80"
      			- "443:443"
    		    volumes:
      			- ./traefik.yml:/etc/traefik/traefik.yml
      			- ./acme.json:/acme.json
      			- /var/run/docker.sock:/var/run/docker.sock:ro
  		  app:
    		    image: vertretungen_app:latest
    		    labels:
      			- "traefik.http.routers.app.rule=Host(`vertretung.local`)"
      			- "traefik.http.routers.app.entrypoints=web"
    		    build: .
    		    command: ["/app/start_all.sh"]
	2.	Testet das Setup mit docker compose up --build und legt lokal in /etc/hosts
			127.0.0.1 vertretung.local
		an, um schon mal auf http://vertretung.local zuzugreifen.

6. Backup-Strategie & Secrets
	•	Legt lokale Skripte an, die
		•	DB-Dumps erzeugen (pg_dump),
		•	wichtige Verzeichnisse (app/data, Logs) in ein ZIP packen.
	•	Stellt sicher, dass eure .env nie ins Repo gelangt (siehe .gitignore).

⸻

Die Punkte kompakt:
	1.	Git-Repo klonen
	2.	Docker & Compose installieren
	3.	SSH-Key hinterlegen
	4.	DNS-Einträge prüfen
	5.	docker compose pull && docker compose up -d ausführen
